/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace digidoc {

using System;
using System.Runtime.InteropServices;

public class Signature : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Signature(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Signature obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Signature() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          digidocPINVOKE.delete_Signature(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual string getMediaType() {
    string ret = digidocPINVOKE.Signature_getMediaType(swigCPtr);
    return ret;
  }

  public virtual void validateOffline() {
    digidocPINVOKE.Signature_validateOffline(swigCPtr);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public string saveToXml() {
    string ret = digidocPINVOKE.Signature_saveToXml(swigCPtr);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getId() {
    string ret = digidocPINVOKE.Signature_getId(swigCPtr);
    return ret;
  }

  public SignatureProductionPlace getProductionPlace() {
    SignatureProductionPlace ret = new SignatureProductionPlace(digidocPINVOKE.Signature_getProductionPlace(swigCPtr), true);
    return ret;
  }

  public SignerRole getSignerRole() {
    SignerRole ret = new SignerRole(digidocPINVOKE.Signature_getSignerRole(swigCPtr), true);
    return ret;
  }

  public string getSigningTime() {
    string ret = digidocPINVOKE.Signature_getSigningTime(swigCPtr);
    return ret;
  }

  public string getSignatureMethod() {
    string ret = digidocPINVOKE.Signature_getSignatureMethod(swigCPtr);
    return ret;
  }

  public byte[] getSigningCert() {
  IntPtr data = digidocPINVOKE.Signature_getSigningCert(swigCPtr);
  byte[] result = new byte[digidocPINVOKE.ByteVector_size(data)];
  Marshal.Copy(digidocPINVOKE.ByteVector_data(data), result, 0, result.Length);
  return result;
}

  public enum CertStatus {
    GOOD,
    REVOKED,
    UNKNOWN
  }

}

}
