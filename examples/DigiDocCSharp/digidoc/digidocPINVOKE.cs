/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace digidoc {

using System;
using System.Runtime.InteropServices;

class digidocPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("digidoc_csharp", EntryPoint="SWIGRegisterExceptionCallbacks_digidoc")]
    public static extern void SWIGRegisterExceptionCallbacks_digidoc(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("digidoc_csharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_digidoc")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_digidoc(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_digidoc(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_digidoc(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(digidocPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(digidocPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("digidoc_csharp", EntryPoint="SWIGRegisterStringCallback_digidoc")]
    public static extern void SWIGRegisterStringCallback_digidoc(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_digidoc(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static digidocPINVOKE() {
  }


  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Clear")]
  public static extern void StringVector_Clear(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Add")]
  public static extern void StringVector_Add(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_size")]
  public static extern uint StringVector_size(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_capacity")]
  public static extern uint StringVector_capacity(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_reserve")]
  public static extern void StringVector_reserve(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_StringVector__SWIG_0")]
  public static extern IntPtr new_StringVector__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_StringVector__SWIG_1")]
  public static extern IntPtr new_StringVector__SWIG_1(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_StringVector__SWIG_2")]
  public static extern IntPtr new_StringVector__SWIG_2(int jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_getitemcopy")]
  public static extern string StringVector_getitemcopy(HandleRef jarg1, int jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_getitem")]
  public static extern string StringVector_getitem(HandleRef jarg1, int jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_setitem")]
  public static extern void StringVector_setitem(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_AddRange")]
  public static extern void StringVector_AddRange(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_GetRange")]
  public static extern IntPtr StringVector_GetRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Insert")]
  public static extern void StringVector_Insert(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_InsertRange")]
  public static extern void StringVector_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_RemoveAt")]
  public static extern void StringVector_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_RemoveRange")]
  public static extern void StringVector_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Repeat")]
  public static extern IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Reverse__SWIG_0")]
  public static extern void StringVector_Reverse__SWIG_0(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Reverse__SWIG_1")]
  public static extern void StringVector_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_SetRange")]
  public static extern void StringVector_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Contains")]
  public static extern bool StringVector_Contains(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_IndexOf")]
  public static extern int StringVector_IndexOf(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_LastIndexOf")]
  public static extern int StringVector_LastIndexOf(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_StringVector_Remove")]
  public static extern bool StringVector_Remove(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_StringVector")]
  public static extern void delete_StringVector(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="ByteVector_data")]
  public static extern IntPtr ByteVector_data(IntPtr data);
  [DllImport("digidoc_csharp", EntryPoint="ByteVector_size")]
  public static extern int ByteVector_size(IntPtr data);
  [DllImport("digidoc_csharp", EntryPoint="ByteVector_to")]
  public static extern HandleRef ByteVector_to([MarshalAs(UnmanagedType.LPArray)]byte[] data, int size);

  class DigidocExceptionHelper {
    // C# delegate for the C/C++ digidocExceptionCallback
    public delegate void DigidocExceptionDelegate(uint type, string message);
    static DigidocExceptionDelegate digidocDelegate =
      new DigidocExceptionDelegate(SetPendingDigidocException);

    [DllImport("digidoc_csharp", EntryPoint="DigidocExceptionRegisterCallback")]
    public static extern
      void DigidocExceptionRegisterCallback(DigidocExceptionDelegate digidocCallback);

    static void SetPendingDigidocException(uint type, string message) {
      switch(type)
      {
      case 0: SWIGPendingException.Set(new DigidocException(message)); break;
      case 1: SWIGPendingException.Set(new DigidocBDocException(message)); break;
      case 2: SWIGPendingException.Set(new DigidocIOException(message)); break;
      case 3: SWIGPendingException.Set(new DigidocSignException(message)); break;
      case 4: SWIGPendingException.Set(new DigidocSignatureException(message)); break;
      default: break;
      }
    }

    static DigidocExceptionHelper() {
      DigidocExceptionRegisterCallback(digidocDelegate);
    }
  }
  static DigidocExceptionHelper exceptionHelper = new DigidocExceptionHelper();


  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_SignatureProductionPlace__SWIG_0")]
  public static extern IntPtr new_SignatureProductionPlace__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_SignatureProductionPlace__SWIG_1")]
  public static extern IntPtr new_SignatureProductionPlace__SWIG_1(string jarg1, string jarg2, string jarg3, string jarg4);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_isEmpty")]
  public static extern bool SignatureProductionPlace_isEmpty(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_city_set")]
  public static extern void SignatureProductionPlace_city_set(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_city_get")]
  public static extern string SignatureProductionPlace_city_get(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_stateOrProvince_set")]
  public static extern void SignatureProductionPlace_stateOrProvince_set(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_stateOrProvince_get")]
  public static extern string SignatureProductionPlace_stateOrProvince_get(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_postalCode_set")]
  public static extern void SignatureProductionPlace_postalCode_set(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_postalCode_get")]
  public static extern string SignatureProductionPlace_postalCode_get(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_countryName_set")]
  public static extern void SignatureProductionPlace_countryName_set(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignatureProductionPlace_countryName_get")]
  public static extern string SignatureProductionPlace_countryName_get(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_SignatureProductionPlace")]
  public static extern void delete_SignatureProductionPlace(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_SignerRole__SWIG_0")]
  public static extern IntPtr new_SignerRole__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_SignerRole__SWIG_1")]
  public static extern IntPtr new_SignerRole__SWIG_1(string jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignerRole_isEmpty")]
  public static extern bool SignerRole_isEmpty(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignerRole_claimedRoles_set")]
  public static extern void SignerRole_claimedRoles_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_SignerRole_claimedRoles_get")]
  public static extern IntPtr SignerRole_claimedRoles_get(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_SignerRole")]
  public static extern void delete_SignerRole(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_Signature")]
  public static extern void delete_Signature(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getMediaType")]
  public static extern string Signature_getMediaType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_validateOffline")]
  public static extern void Signature_validateOffline(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_saveToXml")]
  public static extern string Signature_saveToXml(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getId")]
  public static extern string Signature_getId(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getProductionPlace")]
  public static extern IntPtr Signature_getProductionPlace(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getSignerRole")]
  public static extern IntPtr Signature_getSignerRole(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getSigningTime")]
  public static extern string Signature_getSigningTime(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getSignatureMethod")]
  public static extern string Signature_getSignatureMethod(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Signature_getSigningCert")]
  public static extern IntPtr Signature_getSigningCert(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_Document__SWIG_0")]
  public static extern IntPtr new_Document__SWIG_0(string jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_Document__SWIG_1")]
  public static extern IntPtr new_Document__SWIG_1(string jarg1, string jarg2, string jarg3);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_getFileName")]
  public static extern string Document_getFileName(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_getFilePath")]
  public static extern string Document_getFilePath(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_getMediaType")]
  public static extern string Document_getMediaType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_getSize")]
  public static extern uint Document_getSize(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_calcDigest")]
  public static extern IntPtr Document_calcDigest(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_Document_saveAs")]
  public static extern void Document_saveAs(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_Document")]
  public static extern void delete_Document(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_appInfo")]
  public static extern string appInfo();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_initialize__SWIG_0")]
  public static extern void initialize__SWIG_0(string jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_initialize__SWIG_1")]
  public static extern void initialize__SWIG_1();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_terminate")]
  public static extern void terminate();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_version")]
  public static extern string version();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_ADoc")]
  public static extern void delete_ADoc(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_save")]
  public static extern void ADoc_save(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_saveTo")]
  public static extern void ADoc_saveTo(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_addDocument")]
  public static extern void ADoc_addDocument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_getDocument")]
  public static extern IntPtr ADoc_getDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_removeDocument")]
  public static extern void ADoc_removeDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_documentCount")]
  public static extern uint ADoc_documentCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_documentType")]
  public static extern int ADoc_documentType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_addSignature")]
  public static extern void ADoc_addSignature(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_getSignature")]
  public static extern IntPtr ADoc_getSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_removeSignature")]
  public static extern void ADoc_removeSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_ADoc_signatureCount")]
  public static extern uint ADoc_signatureCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_DDoc__SWIG_0")]
  public static extern IntPtr new_DDoc__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_DDoc__SWIG_1")]
  public static extern IntPtr new_DDoc__SWIG_1(string jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_DDoc")]
  public static extern void delete_DDoc(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_save")]
  public static extern void DDoc_save(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_saveTo")]
  public static extern void DDoc_saveTo(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_addDocument")]
  public static extern void DDoc_addDocument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_getDocument")]
  public static extern IntPtr DDoc_getDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_removeDocument")]
  public static extern void DDoc_removeDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_documentCount")]
  public static extern uint DDoc_documentCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_documentType")]
  public static extern int DDoc_documentType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_addSignature")]
  public static extern void DDoc_addSignature(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_getSignature")]
  public static extern IntPtr DDoc_getSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_removeSignature")]
  public static extern void DDoc_removeSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_signatureCount")]
  public static extern uint DDoc_signatureCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_BDoc__SWIG_0")]
  public static extern IntPtr new_BDoc__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_BDoc__SWIG_1")]
  public static extern IntPtr new_BDoc__SWIG_1(string jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_BDoc")]
  public static extern void delete_BDoc(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_save")]
  public static extern void BDoc_save(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_saveTo")]
  public static extern void BDoc_saveTo(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_addDocument")]
  public static extern void BDoc_addDocument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_getDocument")]
  public static extern IntPtr BDoc_getDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_removeDocument")]
  public static extern void BDoc_removeDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_documentCount")]
  public static extern uint BDoc_documentCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_documentType")]
  public static extern int BDoc_documentType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_newSignatureId")]
  public static extern uint BDoc_newSignatureId(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_getSignature")]
  public static extern IntPtr BDoc_getSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_removeSignature")]
  public static extern void BDoc_removeSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_signatureCount")]
  public static extern uint BDoc_signatureCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_WDoc__SWIG_0")]
  public static extern IntPtr new_WDoc__SWIG_0();

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_WDoc__SWIG_1")]
  public static extern IntPtr new_WDoc__SWIG_1(int jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_WDoc__SWIG_2")]
  public static extern IntPtr new_WDoc__SWIG_2(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_new_WDoc__SWIG_3")]
  public static extern IntPtr new_WDoc__SWIG_3(string jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_delete_WDoc")]
  public static extern void delete_WDoc(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_save")]
  public static extern void WDoc_save(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_saveTo")]
  public static extern void WDoc_saveTo(HandleRef jarg1, string jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_addDocument")]
  public static extern void WDoc_addDocument(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_getDocument")]
  public static extern IntPtr WDoc_getDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_removeDocument")]
  public static extern void WDoc_removeDocument(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_documentCount")]
  public static extern uint WDoc_documentCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_documentType")]
  public static extern int WDoc_documentType(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_addSignature")]
  public static extern void WDoc_addSignature(HandleRef jarg1, HandleRef jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_getSignature")]
  public static extern IntPtr WDoc_getSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_removeSignature")]
  public static extern void WDoc_removeSignature(HandleRef jarg1, uint jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_signatureCount")]
  public static extern uint WDoc_signatureCount(HandleRef jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_setType")]
  public static extern void WDoc_setType(HandleRef jarg1, int jarg2);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_DDoc_SWIGUpcast")]
  public static extern IntPtr DDoc_SWIGUpcast(IntPtr jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_BDoc_SWIGUpcast")]
  public static extern IntPtr BDoc_SWIGUpcast(IntPtr jarg1);

  [DllImport("digidoc_csharp", EntryPoint="CSharp_WDoc_SWIGUpcast")]
  public static extern IntPtr WDoc_SWIGUpcast(IntPtr jarg1);
}

}
