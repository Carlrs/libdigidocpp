/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace digidoc {

using System;
using System.Runtime.InteropServices;

public class WDoc : ADoc {
  private HandleRef swigCPtr;

  internal WDoc(IntPtr cPtr, bool cMemoryOwn) : base(digidocPINVOKE.WDoc_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(WDoc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~WDoc() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          digidocPINVOKE.delete_WDoc(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public WDoc() : this(digidocPINVOKE.new_WDoc__SWIG_0(), true) {
  }

  public WDoc(ADoc.DocumentType type) : this(digidocPINVOKE.new_WDoc__SWIG_1((int)type), true) {
  }

  public WDoc(ADoc doc) : this(digidocPINVOKE.new_WDoc__SWIG_2(ADoc.getCPtr(doc)), true) {
  }

  public WDoc(string path) : this(digidocPINVOKE.new_WDoc__SWIG_3(path), true) {
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void save() {
    digidocPINVOKE.WDoc_save(swigCPtr);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void saveTo(string path) {
    digidocPINVOKE.WDoc_saveTo(swigCPtr, path);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void addDocument(Document document) {
    digidocPINVOKE.WDoc_addDocument(swigCPtr, Document.getCPtr(document));
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Document getDocument(uint id) {
    Document ret = new Document(digidocPINVOKE.WDoc_getDocument(swigCPtr, id), true);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void removeDocument(uint id) {
    digidocPINVOKE.WDoc_removeDocument(swigCPtr, id);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint documentCount() {
    uint ret = digidocPINVOKE.WDoc_documentCount(swigCPtr);
    return ret;
  }

  public override ADoc.DocumentType documentType() {
    ADoc.DocumentType ret = (ADoc.DocumentType)digidocPINVOKE.WDoc_documentType(swigCPtr);
    return ret;
  }

  public override void addSignature(byte[] signature) {
    digidocPINVOKE.WDoc_addSignature(swigCPtr, digidocPINVOKE.ByteVector_to(signature, signature.Length));
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Signature getSignature(uint id) {
    IntPtr cPtr = digidocPINVOKE.WDoc_getSignature(swigCPtr, id);
    Signature ret = (cPtr == IntPtr.Zero) ? null : new Signature(cPtr, false);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void removeSignature(uint id) {
    digidocPINVOKE.WDoc_removeSignature(swigCPtr, id);
    if (digidocPINVOKE.SWIGPendingException.Pending) throw digidocPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint signatureCount() {
    uint ret = digidocPINVOKE.WDoc_signatureCount(swigCPtr);
    return ret;
  }

  public void setType(ADoc.DocumentType type) {
    digidocPINVOKE.WDoc_setType(swigCPtr, (int)type);
  }

}

}
